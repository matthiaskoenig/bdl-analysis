par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(1, type="n", xlab="", ylab="", asp=1,
xlim=c(1, Nt), ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
if (!is.null(folder)){
invisible(dev.off())
}
}
plot_clusters(method=method, folder=NULL)
plot(1, type="n", xlab="", ylab="", asp=1,
xlim=c(1, Nt), ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(1, type="n", xlab="", ylab="", asp=1,
xlim=c(1, Nt), ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(1, type="n", xlab="", ylab="", asp=1,
xlim=c(1, Nt), ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(1, type="n", xlab="", ylab="",
xlim=c(1, Nt), ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(1, type="n", xlab="", ylab="",
xlim=c(1, Nt), ylim=c( min(min(dgroup, na.rm=TRUE), na.rm=TRUE), max(max(dgroup, na.rm=TRUE), na.rm=TRUE) ),# ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(1, type="n", xlab="", ylab="",
xlim=c(1, Nt), ylim=1.1*c( min(min(dgroup, na.rm=TRUE), na.rm=TRUE), max(max(dgroup, na.rm=TRUE), na.rm=TRUE) ),# ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
steps <- levels(BDLsamples$time_fac)
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(1, type="n", xlab="", ylab="",
xlim=c(1, Nt), ylim=1.1*c( min(min(dgroup, na.rm=TRUE), na.rm=TRUE), max(max(dgroup, na.rm=TRUE), na.rm=TRUE) ),# ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
warnings()
plot(levels(BDLsamples$time_fac), 1)
plot(levels(BDLsamples$time_fac), rep(1, 8))
plot(as.factor(levels(BDLsamples$time_fac)), rep(1, 8))
plot(as.factor(levels(BDLsamples$time_fac)), 1:8, 'o')
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
steps <- levels(BDLsamples$time_fac)
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(as.factor(levels(BDLsamples$time_fac)), rep(-2, 8), type="n", xlab="", ylab="",
xlim=c(1, Nt), ylim=1.1*c( min(min(dgroup, na.rm=TRUE), na.rm=TRUE), max(max(dgroup, na.rm=TRUE), na.rm=TRUE) ),# ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(as.factor(levels(BDLsamples$time_fac)), rep(-2, 8), type="n", xlab="", ylab="",
xlim=c(1, Nt), ylim=1.1*c( min(min(dgroup, na.rm=TRUE), na.rm=TRUE), max(max(dgroup, na.rm=TRUE), na.rm=TRUE) ),# ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(as.factor(levels(BDLsamples$time_fac), levels=levels(BDLsamples$time_fac)), rep(-2, 8), type="n", xlab="", ylab="",
xlim=c(1, Nt), ylim=1.1*c( min(min(dgroup, na.rm=TRUE), na.rm=TRUE), max(max(dgroup, na.rm=TRUE), na.rm=TRUE) ),# ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(factor(levels(BDLsamples$time_fac), levels=levels(BDLsamples$time_fac)), rep(-2, 8), type="n", xlab="", ylab="",
xlim=c(1, Nt), ylim=1.1*c( min(min(dgroup, na.rm=TRUE), na.rm=TRUE), max(max(dgroup, na.rm=TRUE), na.rm=TRUE) ),# ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
# plot mean clusters
plot_clusters <- function(method, folder=NULL){
# create the figure
if (!is.null(folder)){
fname <- sprintf("%s_cluster_overview.png", method)
path <- file.path(folder, 'cluster', fname)
png(filename=path, width=2000, height=1400, res=300)
}
# par(mfrow=c(ceiling(sqrt(Ngroups)),ceiling(sqrt(Ngroups))))
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(factor(levels(BDLsamples$time_fac), levels=levels(BDLsamples$time_fac)), rep(-2, 8), type="n", xlab="", ylab="",
xlim=c(1, Nt), ylim=1.1*c( min(min(dgroup, na.rm=TRUE), na.rm=TRUE), max(max(dgroup, na.rm=TRUE), na.rm=TRUE) ),# ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
if (!is.null(folder)){
invisible(dev.off())
}
}
plot_clusters(method=method, folder=resultsFolder)
# plot mean clusters
plot_clusters <- function(method, folder=NULL){
# create the figure
if (!is.null(folder)){
fname <- sprintf("%s_cluster_overview.png", method)
path <- file.path(folder, 'cluster', fname)
png(filename=path, width=2000, height=1400, res=300)
}
# par(mfrow=c(ceiling(sqrt(Ngroups)),ceiling(sqrt(Ngroups))))
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(factor(levels(BDLsamples$time_fac), levels=levels(BDLsamples$time_fac)), rep(-2, 8), type="n", xlab="", ylab="",
xlim=c(1, Nt), ylim=1.1*c( min(min(dgroup, na.rm=TRUE), na.rm=TRUE), max(max(dgroup, na.rm=TRUE), na.rm=TRUE) ),# ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
if (!is.null(folder)){
invisible(dev.off())
}
}
plot_clusters(method=method, folder=resultsPath)
# plot mean clusters
plot_clusters <- function(method, folder=NULL){
# create the figure
if (!is.null(folder)){
fname <- sprintf("%s_cluster_overview.png", method)
path <- file.path(folder, 'cluster', fname)
png(filename=path, width=4000, height=2800, res=300)
}
# par(mfrow=c(ceiling(sqrt(Ngroups)),ceiling(sqrt(Ngroups))))
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(factor(levels(BDLsamples$time_fac), levels=levels(BDLsamples$time_fac)), rep(-2, 8), type="n", xlab="", ylab="",
xlim=c(1, Nt), ylim=1.1*c( min(min(dgroup, na.rm=TRUE), na.rm=TRUE), max(max(dgroup, na.rm=TRUE), na.rm=TRUE) ),# ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
if (!is.null(folder)){
invisible(dev.off())
}
}
plot_clusters(method=method, folder=resultsPath)
# plot mean clusters
plot_clusters <- function(method, folder=NULL){
# create the figure
if (!is.null(folder)){
fname <- sprintf("%s_cluster_overview.png", method)
path <- file.path(folder, 'cluster', fname)
png(filename=path, width=4000, height=2800, res=200)
}
# par(mfrow=c(ceiling(sqrt(Ngroups)),ceiling(sqrt(Ngroups))))
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(factor(levels(BDLsamples$time_fac), levels=levels(BDLsamples$time_fac)), rep(-2, 8), type="n", xlab="", ylab="",
xlim=c(1, Nt), ylim=1.1*c( min(min(dgroup, na.rm=TRUE), na.rm=TRUE), max(max(dgroup, na.rm=TRUE), na.rm=TRUE) ),# ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
if (!is.null(folder)){
invisible(dev.off())
}
}
plot_clusters(method=method, folder=resultsPath)
# plot mean clusters
plot_clusters <- function(method, folder=NULL){
# create the figure
if (!is.null(folder)){
fname <- sprintf("%s_cluster_overview.png", method)
path <- file.path(folder, 'cluster', fname)
png(filename=path, width=3000, height=2100, res=300)
}
# par(mfrow=c(ceiling(sqrt(Ngroups)),ceiling(sqrt(Ngroups))))
par(mfrow=c(2,3))
steps <- 1:Nt  # time points
for (k in 1:Ngroups){
g <- groups.hc.order[groups.hc.order==k]
N <- ceiling(sqrt(length(g)))
# normalized mean data (normalized within factor)
dgroup <- BDLmean.norm[names(g)]
# mean and sd for timepoints (i.e. over all factors in the cluster)
g.mean <- rowMeans(as.matrix(dgroup), na.rm=TRUE)
g.sd <- rowSds(as.matrix(dgroup), na.rm=TRUE)
# plot sd range
plot(factor(levels(BDLsamples$time_fac), levels=levels(BDLsamples$time_fac)), rep(-2, 8), type="n", xlab="", ylab="",
xlim=c(1, Nt), ylim=1.1*c( min(min(dgroup, na.rm=TRUE), na.rm=TRUE), max(max(dgroup, na.rm=TRUE), na.rm=TRUE) ),# ylim=c(-1, 1),
main=sprintf("%s : Cluster %s (N=%s)", method, k, ncol(dgroup)))
polygon(c(steps, rev(steps)), c(g.mean+g.sd, rev(g.mean-g.sd)),
col = rgb(0.5,0.5,0.5,0.5), border = NA)
# individual data
for (name in names(g)){
points(steps, dgroup[, name], pch=16, col="black")
lines(steps, dgroup[, name], col=rgb(0.5,0.5,0.5, 0.8), lwd=1)
}
# mean over factors in cluster
lines(steps, g.mean, col="blue", lwd=2)
}
par(mfrow=c(1,1))
if (!is.null(folder)){
invisible(dev.off())
}
}
plot_clusters(method=method, folder=resultsPath)
# print the clusters
# TODO: refactor the multiple clustering
cor.cluster <- correlation_matrix_for_method(method="ys3")
hc <- hclust(dist(cor.cluster))
groups <- cutree(hc, k=Ngroups)
for (k in 1:Ngroups){
g <- groups[groups==k]
cat(sprintf("------------------------------------------\n", k, length(g)))
cat(sprintf("Cluster %s (N=%s)\n", k, length(g)))
cat(sprintf("------------------------------------------\n", k, length(g)))
print(names(g))
}
3600 * 77
# Calculation of ANOVA for all factors
df.anova <- all_factor_anova()
df.anova$sig <- sapply(df.anova$p.value, significant_code)  # add significant codes
df.anova$p.holm <- p.adjust(df.anova$p.value, method ="holm" , n = length(df.anova$p.value))
df.anova$sig.holm <- sapply(df.anova$p.holm, significant_code)
# order factors by adjusted p-values
df.anova.ordered <- df.anova[with(df.anova, order(p.holm)), ]
df.anova.ordered
# save results
write.table(df.anova.ordered, file=file.path(resultsPath, 'BDLanova.csv'), sep="\t", quote=FALSE)
BDLanova <- df.anova
save(df.anova, file=file.path(resultsPath, "BDLanova.Rdata"))
BDLanova
BDLprobes
??BDLanalysis
ProbeInformation()
install.packages("ProbeInformation")
