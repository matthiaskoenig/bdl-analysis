library(BDLanalysis)
library(BDLanalysis)
library(BDLanalysis)
library(BDLanalysis)
library(BDLanalysis)
library(BDLanalysis)
install.packages(devtools)
install.packages("devtools")
install.packages("xml2")
install.packages("devtools")
install('roxygen2')
install.package('roxygen2')
install.packages('roxygen2')
library(BDLanalysis)
devtools::load_all(".")
devtools::use_data_raw()
f_cor_pair_plot("Actb", "Por")
baseLoc <- system.file(package="BDLanalysis")
extPath <- file.path(baseLoc, "extdata")
resultsPath <- "/home/mkoenig/git/bdl-analysis/results"
library('reshape')
library("calibrate")
library('BDLanalysis')
data(BDLdata)
data(BDLsamples)
data(BDLprobes)
BDLmean <- bdl_mean_data(BDLdata, BDLsamples)
print(BDLmean[,1])
BDLmatrices <- bdl_matrix_data(BDLdata, BDLsamples)
print(BDLmatrices[[1]])
f_cor_pair_plot("Actb", "Por")
devtools::load_all(".")
install.packages("devtools")
devtools::load_all(".")
plot_cor_pair("Actb", "Por")
devtools::load_all(".")
plot_cor_pair("Actb", "Por")
BDLmean.time <- as.numeric(levels(as.factor(BDLsamples$time)))
devtools::load_all(".")
plot_cor_pair("Actb", "Por")
devtools::load_all(".")
plot_cor_pair("Actb", "Por")
options <- list(width=1600, height=600, res=200)
png(filename=file.path(resultsPath, "Actb_control.png"), width=1600, height=600, res=200)
par(mfrow=c(1,3))
plot_cor_pair("Actb", "Actb.x", single_plots=FALSE)
plot_cor_pair("Actb", "Actb.y", single_plots=FALSE)
plot_cor_pair("Actb.x", "Actb.y", single_plots=FALSE)
par(mfrow=c(1,1))
dev.off()
devtools::load_all(".")
options <- list(width=1600, height=600, res=200)
png(filename=file.path(resultsPath, "Actb_control.png"), width=1600, height=600, res=200)
par(mfrow=c(1,3))
plot_cor_pair("Actb", "Actb.x", single_plots=FALSE)
plot_cor_pair("Actb", "Actb.y", single_plots=FALSE)
plot_cor_pair("Actb.x", "Actb.y", single_plots=FALSE)
par(mfrow=c(1,1))
dev.off()
# calculate the correlations
plot_cor_pair("Actb", "Actb.x")
plot_cor_pair("Actb", "Actb.y")
plot_cor_pair("Actb.x", "Actb.y")
cat('Actb Spearman : individual points\n')
actb.spearman <- cor(data.frame(Actb=data$Actb,
Actb.x=data$Actb.x,
Actb.y=data$Actb.y), method="spearman")
print(actb.spearman)
cat('Actb Spearman : mean\n')
actb.spearman.mean <- cor(data.frame(Actb=dmean$Actb,
Actb.x=dmean$Actb.x,
Actb.y=dmean$Actb.y), method="spearman")
print(actb.spearman.mean)
cat('Actb Pearson : individual points\n')
actb.pearson <- cor(data.frame(Actb=data$Actb,
Actb.x=data$Actb.x,
Actb.y=data$Actb.y), method="pearson")
print(actb.pearson)
cat('Actb Pearson : mean\n')
actb.pearson.mean <- cor(data.frame(Actb=dmean$Actb,
Actb.x=dmean$Actb.x,
Actb.y=dmean$Actb.y), method="pearson")
print(actb.pearson.mean)
cat('Actb Spearman : individual points\n')
actb.spearman <- cor(data.frame(Actb=BDLdata$Actb,
Actb.x=BDLdata$Actb.x,
Actb.y=BDLdata$Actb.y), method="spearman")
print(actb.spearman)
cat('Actb Spearman : mean\n')
actb.spearman.mean <- cor(data.frame(Actb=BDLmean$Actb,
Actb.x=BDLmean$Actb.x,
Actb.y=BDLmean$Actb.y), method="spearman")
print(actb.spearman.mean)
cat('Actb Pearson : individual points\n')
actb.pearson <- cor(data.frame(Actb=BDLdata$Actb,
Actb.x=BDLdata$Actb.x,
Actb.y=BDLdata$Actb.y), method="pearson")
print(actb.pearson)
cat('Actb Pearson : mean\n')
actb.pearson.mean <- cor(data.frame(Actb=BDLmean$Actb,
Actb.x=BDLmean$Actb.x,
Actb.y=BDLmean$Actb.y), method="pearson")
print(actb.pearson.mean)
cat('Actb Pearson : mean\n')
actb.pearson.mean <- cor(data.frame(Actb=BDLmean$Actb,
Actb.x=BDLmean$Actb.x,
Actb.y=BDLmean$Actb.y), method="pearson")
print(actb.pearson.mean)
# calculate the correlations
plot_cor_pair("Actb", "Actb.x")
plot_cor_pair("Actb", "Actb.y")
plot_cor_pair("Actb.x", "Actb.y")
cat('Actb Spearman : individual points\n')
actb.spearman <- cor(data.frame(Actb=BDLdata$Actb,
Actb.x=BDLdata$Actb.x,
Actb.y=BDLdata$Actb.y), method="spearman")
print(actb.spearman)
cat('Actb Spearman : mean\n')
actb.spearman.mean <- cor(data.frame(Actb=BDLmean$Actb,
Actb.x=BDLmean$Actb.x,
Actb.y=BDLmean$Actb.y), method="spearman")
print(actb.spearman.mean)
cat('Actb Pearson : individual points\n')
actb.pearson <- cor(data.frame(Actb=BDLdata$Actb,
Actb.x=BDLdata$Actb.x,
Actb.y=BDLdata$Actb.y), method="pearson")
print(actb.pearson)
cat('Actb Pearson : mean\n')
actb.pearson.mean <- cor(data.frame(Actb=BDLmean$Actb,
Actb.x=BDLmean$Actb.x,
Actb.y=BDLmean$Actb.y), method="pearson")
print(actb.pearson.mean)
options <- list(width=1600, height=600, res=200)
png(filename=file.path(resultsPath, "Actb_control.png"), width=1600, height=600, res=200)
par(mfrow=c(1,3))
plot_cor_pair("Actb", "Actb.x", single_plots=FALSE)
plot_cor_pair("Actb", "Actb.y", single_plots=FALSE)
plot_cor_pair("Actb.x", "Actb.y", single_plots=FALSE)
par(mfrow=c(1,1))
dev.off()
# Actb control figure
options <- list(width=1600, height=600, res=200)
png(filename=file.path(resultsPath, "Actb_control.png"), width=1600, height=600, res=200)
par(mfrow=c(1,3))
plot_cor_pair("Actb", "Actb.x", single_plots=FALSE)
plot_cor_pair("Actb", "Actb.y", single_plots=FALSE)
plot_cor_pair("Actb.x", "Actb.y", single_plots=FALSE)
par(mfrow=c(1,1))
dev.off()
# calculate the correlations
plot_cor_pair("Actb", "Actb.x")
plot_cor_pair("Actb", "Actb.y")
plot_cor_pair("Actb.x", "Actb.y")
cat('Actb Spearman : individual points\n')
actb.spearman <- cor(data.frame(Actb=BDLdata$Actb,
Actb.x=BDLdata$Actb.x,
Actb.y=BDLdata$Actb.y), method="spearman")
print(actb.spearman)
cat('Actb Spearman : mean\n')
actb.spearman.mean <- cor(data.frame(Actb=BDLmean$Actb,
Actb.x=BDLmean$Actb.x,
Actb.y=BDLmean$Actb.y), method="spearman")
print(actb.spearman.mean)
cat('Actb Pearson : individual points\n')
actb.pearson <- cor(data.frame(Actb=BDLdata$Actb,
Actb.x=BDLdata$Actb.x,
Actb.y=BDLdata$Actb.y), method="pearson")
print(actb.pearson)
cat('Actb Pearson : mean\n')
actb.pearson.mean <- cor(data.frame(Actb=BDLmean$Actb,
Actb.x=BDLmean$Actb.x,
Actb.y=BDLmean$Actb.y), method="pearson")
print(actb.pearson.mean)
library(BDLanalysis)
#-------------------------------------------------------------------------------
# Read & preprocess data
#
# The individual raw data files are loaded and combined in a single data frame.
# Factor and timecourse information is added.
# All processed datasets are stored as Rdata files in combination with the
# packages.
#
# Processed data is made available in the package via
#     library(BDLanalysis)
#     data(BDLdata)
#     data(BDLsamples)
#-------------------------------------------------------------------------------
rm(list=ls())
setwd("/home/mkoenig/git/bdl-analysis/BDLanalysis")
samples <- read.csv('inst/extdata/samples.csv', sep="\t")
histology <- read.csv('inst/extdata/histology.csv', sep="\t")
adme <- read.csv('inst/extdata/fluidigm_ADME.csv', sep="\t")
cytokines <- read.csv('inst/extdata/fluidigm_cytokines.csv', sep="\t")
fibrosis1 <- read.csv('inst/extdata/fluidigm_fibrosis_01.csv', sep="\t")
fibrosis2 <- read.csv('inst/extdata/fluidigm_fibrosis_02.csv', sep="\t")
antibodies <- read.csv('inst/extdata/antibodies.csv', sep="\t")
# Two repeats of the fibrosis fluidigm chip were measured.
# The mean value of the two chips is used for analysis.
fibrosis <- (fibrosis1 + fibrosis2) / 2
fibrosis$time <- fibrosis1$time
rm(fibrosis1, fibrosis2)
# subset of data is prepared and merged
d <- list()
d$gldh <- data.frame(histology[, c("sid_GLDH", "GLDH")])
names(d$gldh) <- c("sid", "GLDH")
d$alt <- data.frame(histology[, c("sid_ALT", "ALT")])
names(d$alt) <- c("sid", "ALT")
d$bilirubin <- data.frame(histology[, c("sid_Bilirubin", "Bilirubin")])
names(d$bilirubin) <- c("sid", "bilirubin")
d$albumin <- data.frame(histology[, c("sid_albumin", "albumin")])
names(d$albumin) <- c("sid", "albumin")
d$hc <- data.frame(histology[, c("sid_BrdU_HC", "BrdU_HC")])
names(d$hc) <- c("sid", "BrdU_HC")
d$nhc <- data.frame(histology[, c("sid_BrdU_NHC", "BrdU_NHC")])
names(d$nhc) <- c("sid", "BrdU_NHC")
d$kupffer <- data.frame(histology[, c("sid_BrdU_Kupffer", "BrdU_Kupffer")])
names(d$kupffer) <- c("sid", "BrdU_Kupffer")
d$hsc <- data.frame(histology[, c("sid_BrdU_HSC", "BrdU_HSC")])
names(d$hsc) <- c("sid", "BrdU_HSC")
d$siriusRed <- data.frame(histology[, c("sid_BrdU_SiriusRed", "BrdU_SiriusRed")])
names(d$siriusRed) <- c("sid", "BrdU_SirirusRed")
d$bileInfarcts <- data.frame(histology[, c("sid_bileInfarcts", "bileInfarcts")])
names(d$bileInfarcts) <- c("sid", "bileInfarcts")
summary(d)
# Merge the histological & antibody datasets on sample ids
tmp <- merge(d$gldh, d$alt, by="sid")
tmp <- merge(tmp, d$bilirubin, by="sid")
tmp <- merge(tmp, d$albumin, by="sid")
tmp <- merge(tmp, d$hc, by="sid")
tmp <- merge(tmp, d$nhc, by="sid")
tmp <- merge(tmp, d$kupffer, by="sid")
tmp <- merge(tmp, d$hsc, by="sid")
tmp <- merge(tmp, d$siriusRed, by="sid")
tmp <- merge(tmp, d$bileInfarcts, by="sid")
histology.processed <- tmp
head(histology.processed)
# remove pid from antibodies
antibodies <- subset(antibodies, select = -c(pid) )
head(antibodies)
# Merge histological & antibody data with the fluidigm data
tmp <- merge(adme, cytokines, by = c('sid', 'time'))
tmp <- merge(tmp, fibrosis, by = c('sid', 'time'))
tmp <- merge(tmp, histology.processed, by=c('sid'))
tmp <- merge(tmp, antibodies, by=c('sid'))
data <- tmp
# Set sample ids as row numbers for data and samples
rownames(data) <- data$sid
rownames(samples) <- samples$sid
# create the ordered time factor in the samples
samples$time_fac <- ordered(data$time, levels = c("0h", "6h", "12h", "18h", "30h", "2d", "5d", "14d"))
samples$time_point <- as.vector(t(matrix(rep(seq(1,8), 5), nrow=8, ncol=5)))
# create the repeat info
samples$repeats <- (seq(from=0, to=(nrow(samples)-1))%%5) +1
# remove non-factor columns which are not part of the correlation analysis
data <- subset(data, select = -c(sid,time) )
rm(tmp, d, adme, antibodies, cytokines, fibrosis, histology, histology.processed)
BDLdata <- data
BDLsamples <- samples
# save processed data
save(BDLdata, file="data/BDLdata.RData")
save(BDLsamples, file="data/BDLsamples.RData")
rm(data, samples, BDLdata, BDLsamples)
# information for probe mapping ------------------------------------------------
BDLprobes <- read.csv('inst/extdata/probe_mapping.csv', stringsAsFactors=FALSE,
sep="\t")
save(BDLprobes, file="data/BDLprobes.RData")
devtools::load_all(".")
library(BDLanalysis)
library(BDLanalysis)
df.anova <- all_factor_anova()
library('reshape')
library("calibrate")
library('BDLanalysis')
data(BDLdata)
data(BDLsamples)
data(BDLprobes)
BDLmean <- bdl_mean_data(BDLdata, BDLsamples)
BDLmean.time <- as.numeric(levels(as.factor(BDLsamples$time)))
df.anova <- all_factor_anova()
df.anova$sig <- sapply(df.anova$p.value, significant_code)
BDLmatrices <- bdl_matrix_data(BDLdata, BDLsamples)
print(BDLmatrices[[1]])
df.anova <- all_factor_anova()
df.anova$sig <- sapply(df.anova$p.value, significant_code)
df.anova$p.holm <- p.adjust(df.anova$p.value, method ="holm" , n = length(df.anova$p.value))
df.anova$sig.holm <- sapply(df.anova$p.holm, significant_code)
df.anova
packrat::restore(prompt = FALSE)
install.packages("gitr2")
packrat::restore(prompt = FALSE)
remove.packages("git2r", lib="")
packrat::restore(prompt = FALSE)
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rversions")
install.packages("xml2")
install.packages("rversions")
packrat::restore(prompt = FALSE)
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("git2r"))
install.packages(c("git2r"))
packrat::restore(prompt = FALSE)
library(BDLanalysis)
library(BDLanalysis)
packrat::snapshot(prompt = FALSE)
