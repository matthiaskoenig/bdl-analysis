options = list()
options$width=1600
options$height=800
options$res=150
# factor names
factors <- colnames(data)
# Create plot of a single factor
# plot individual data points with number
plot_single_factor <- function(k){
name <- factors[k]
fname <- paste("../results/factors/", sprintf("%03d", k), "_", name, ".png", sep="")
png(filename=fname, width=options$width, height=options$height, res=options$res)
par(mfrow=c(1,2))
# plot with time
plot(time, data[,k], at=sort(as.numeric(levels(as.factor(samples$time)))), col="blue",
xlab="time [h]", ylab=name, main=name,
ylim=c(0, max(data[,k])*1.1 ))
points(samples$time, data[,k], col="black")
points(samples$time, data[,k], col=rgb(0,0,1,0.6), pch=16)
# plot as factor
plot(time, data[,k], xlab="time", ylab=name, main=name, col=rgb(0.5,0.5,0.5, 0.4),
ylim=c(0, max(data[,k])*1.1))
points(time, data[,k], col="black")
points(time, data[,k], col=rgb(0,0,1,0.6), pch=16)
par(mfrow=c(1,1))
dev.off()
}
plot_single_factor(1)
for (k in 1:length(factors)){
print(k)
plot_single_factor(k)
}
data[:,148]
data[,148]
probes <- read.csv(file.path("..", "data", "probe_mapping.csv"), sep="\t")
head(probes)
which(probes$Gene=="Nos2")
library(corrplot)
png(filename="cor.spearman_original.png", width=options$width, height=options$height,
res=options$res)
corrplot(cor.spearman, order="original", method="square", type="full",
tl.cex=0.3, tl.col="black", # label settings
)
dev.off()
png(filename="cor.spearman_hclust.png", width=options$width, height=options$height,
res=options$res)
corrplot(cor.spearman, order="hclust", method="square", type="full",
tl.cex=0.3, tl.col="black", # label settings
)
dev.off()
options$width=1600
options$height=1600
options$res=200
# Calculation of correlation scores
cor.pearson <- cor(data, method="pearson", use="pairwise.complete.obs")
cor.spearman <- cor(data, method="spearman", use="pairwise.complete.obs")
# Create the correlation plots
# install.packages("corrplot")
library(corrplot)
png(filename="cor.spearman_original.png", width=options$width, height=options$height,
res=options$res)
corrplot(cor.spearman, order="original", method="square", type="full",
tl.cex=0.3, tl.col="black", # label settings
)
dev.off()
png(filename="cor.spearman_hclust.png", width=options$width, height=options$height,
res=options$res)
corrplot(cor.spearman, order="hclust", method="square", type="full",
tl.cex=0.3, tl.col="black", # label settings
)
dev.off()
get_probe_info <- function(gene_id){
info <- list()
idx <- which(probes$Gene=="Nos2")
if (idx!=NULL & length(idx)>0){
info$Protein.name <- probes$Protein.names(idx[1])
} else {
info$Protein.name <- NULL
}
return(info)
}
plot_single_factor <- function(k){
name <- factors[k]
info <- get_probe_info(name)
main <- name
if (info$Protein.name != NULL){
main <- paste(name, "(", info$Protein.name, ")")
}
fname <- paste("../results/factors/", sprintf("%03d", k), "_", name, ".png", sep="")
png(filename=fname, width=options$width, height=options$height, res=options$res)
par(mfrow=c(1,2))
# plot with time
plot(time, data[,k], at=sort(as.numeric(levels(as.factor(samples$time)))), col="blue",
xlab="time [h]", ylab=name, main=name,
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1 ))
points(samples$time, data[,k], col="black")
points(samples$time, data[,k], col=rgb(0,0,1,0.6), pch=16)
# plot as factor
plot(time, data[,k], xlab="time", ylab=name, main=name, col=rgb(0.5,0.5,0.5, 0.4),
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1))
points(time, data[,k], col="black")
points(time, data[,k], col=rgb(0,0,1,0.6), pch=16)
par(mfrow=c(1,1))
dev.off()
}
plot_single_factor(1)
probes <- read.csv(file.path("..", "data", "probe_mapping.csv"), sep="\t")
head(probes)
get_probe_info <- function(gene_id){
info <- list()
idx <- which(probes$Gene=="Nos2")
if (!is.null(idx) & length(idx)>0){
info$Protein.name <- probes$Protein.names(idx[1])
} else {
info$Protein.name <- NULL
}
return(info)
}
# factor names
factors <- colnames(data)
# TODO: add name, add estimated curves (splines)
# Create plot of a single factor
# plot individual data points with number
plot_single_factor <- function(k){
name <- factors[k]
info <- get_probe_info(name)
main <- name
if (!is.null(info$Protein.name)){
main <- paste(name, "(", info$Protein.name, ")")
}
fname <- paste("../results/factors/", sprintf("%03d", k), "_", name, ".png", sep="")
png(filename=fname, width=options$width, height=options$height, res=options$res)
par(mfrow=c(1,2))
# plot with time
plot(time, data[,k], at=sort(as.numeric(levels(as.factor(samples$time)))), col="blue",
xlab="time [h]", ylab=name, main=name,
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1 ))
points(samples$time, data[,k], col="black")
points(samples$time, data[,k], col=rgb(0,0,1,0.6), pch=16)
# plot as factor
plot(time, data[,k], xlab="time", ylab=name, main=name, col=rgb(0.5,0.5,0.5, 0.4),
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1))
points(time, data[,k], col="black")
points(time, data[,k], col=rgb(0,0,1,0.6), pch=16)
par(mfrow=c(1,1))
dev.off()
}
plot_single_factor(1)
# Create all the plots
for (k in 1:length(factors)){
print(k)
plot_single_factor(k)
}
get_probe_info('Nos2')
get_probe_info <- function(gene_id){
info <- list()
idx <- which(probes$Gene=="Nos2")
if (!is.null(idx) & length(idx)>0){
info$Protein.name <- probes$Protein.names[idx[1]]
} else {
info$Protein.name <- NULL
}
return(info)
}
get_probe_info('Nos2')
probes <- read.csv(file.path("..", "data", "probe_mapping.csv"), stringsAsFactors=FALSE, sep="\t")
head(probes)
get_probe_info <- function(gene_id){
info <- list()
idx <- which(probes$Gene=="Nos2")
if (!is.null(idx) & length(idx)>0){
info$Protein.name <- probes$Protein.names[idx[1]]
} else {
info$Protein.name <- NULL
}
return(info)
}
get_probe_info('Nos2')
get_probe_info <- function(gene_id){
info <- list()
idx <- which(probes$Gene=="Nos2")
if (!is.null(idx) & length(idx)>0){
info$Protein.name <- probes$Protein.names[idx[1]]
info$Chip <- probes$Chip[idx[1]]
info$Entry <- probes$Entry[idx[1]]
info$Gene.name <- probes$Gene.names[idx[1]]
} else {
info$Protein.name <- NULL
}
return(info)
}
get_probe_info('Nos2')
plot_single_factor <- function(k){
name <- factors[k]
info <- get_probe_info(name)
main <- name
if (!is.null(info$Protein.name)){
main <- paste(name, "(", info$Protein.name, ")")
}
fname <- paste("../results/factors/", sprintf("%03d", k), "_", name, ".png", sep="")
png(filename=fname, width=options$width, height=options$height, res=options$res)
par(mfrow=c(1,2))
# plot with time
plot(time, data[,k], at=sort(as.numeric(levels(as.factor(samples$time)))), col="blue",
xlab="time [h]", ylab=name, main=name,
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1 ))
points(samples$time, data[,k], col="black")
points(samples$time, data[,k], col=rgb(0,0,1,0.6), pch=16)
# plot as factor
plot(time, data[,k], xlab="time", ylab=name, main=name, col=rgb(0.5,0.5,0.5, 0.4),
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1))
points(time, data[,k], col="black")
points(time, data[,k], col=rgb(0,0,1,0.6), pch=16)
par(mfrow=c(1,1))
dev.off()
}
plot_single_factor(1)
plot_single_factor <- function(k){
name <- factors[k]
info <- get_probe_info(name)
# create the title
main <- name
if (!is.null(info$Protein.name)){
main <- paste(name, "(", info$Protein.name, ")")
}
fname <- paste("../results/factors/", sprintf("%03d", k), "_", name, ".png", sep="")
png(filename=fname, width=options$width, height=options$height, res=options$res)
par(mfrow=c(1,2))
# plot with time
plot(time, data[,k], at=sort(as.numeric(levels(as.factor(samples$time)))), col="blue",
xlab="time [h]", ylab=name, main=main,
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1 ))
points(samples$time, data[,k], col="black")
points(samples$time, data[,k], col=rgb(0,0,1,0.6), pch=16)
# plot as factor
plot(time, data[,k], xlab="time", ylab=name, main=name, col=rgb(0.5,0.5,0.5, 0.4),
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1))
points(time, data[,k], col="black")
points(time, data[,k], col=rgb(0,0,1,0.6), pch=16)
par(mfrow=c(1,1))
dev.off()
}
plot_single_factor(1)
# Create all the plots
for (k in 1:length(factors)){
print(k)
plot_single_factor(k)
}
plot_single_factor <- function(k){
name <- factors[k]
info <- get_probe_info(name)
fname <- paste("../results/factors/", sprintf("%03d", k), "_", name, ".png", sep="")
png(filename=fname, width=options$width, height=options$height, res=options$res)
par(mfrow=c(1,2))
# [A] plot with time
plot(time, data[,k], at=sort(as.numeric(levels(as.factor(samples$time)))), col="blue",
xlab="time [h]", ylab=name, main=name,
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1 ))
points(samples$time, data[,k], col="black")
points(samples$time, data[,k], col=rgb(0,0,1,0.6), pch=16)
if (!is.null(info$Protein.name)){
text(x=0, y=max(data[,k], na.rm=TRUE)*1.05,
labels=paste(name, "(", info$Protein.name, ")"))
}
# [B] plot as factor
plot(time, data[,k], xlab="time", ylab=name, main=name, col=rgb(0.5,0.5,0.5, 0.4),
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1))
points(time, data[,k], col="black")
points(time, data[,k], col=rgb(0,0,1,0.6), pch=16)
par(mfrow=c(1,1))
dev.off()
}
plot_single_factor(1)
plot_single_factor <- function(k){
name <- factors[k]
info <- get_probe_info(name)
fname <- paste("../results/factors/", sprintf("%03d", k), "_", name, ".png", sep="")
png(filename=fname, width=options$width, height=options$height, res=options$res)
par(mfrow=c(1,2))
# [A] plot with time
plot(time, data[,k], at=sort(as.numeric(levels(as.factor(samples$time)))), col="blue",
xlab="time [h]", ylab=name, main=name,
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1 ))
points(samples$time, data[,k], col="black")
points(samples$time, data[,k], col=rgb(0,0,1,0.6), pch=16)
if (!is.null(info$Protein.name)){
text(x=0, y=max(data[,k], na.rm=TRUE)*1.05,
labels=paste(name, "(", info$Protein.name, ")"))
}
# [B] plot as factor
plot(time, data[,k], xlab="time", ylab=name, main=name, col=rgb(0.5,0.5,0.5, 0.4),
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1))
points(time, data[,k], col="black")
points(time, data[,k], col=rgb(0,0,1,0.6), pch=16, cex=0.3)
par(mfrow=c(1,1))
dev.off()
}
plot_single_factor(1)
plot_single_factor <- function(k){
name <- factors[k]
info <- get_probe_info(name)
fname <- paste("../results/factors/", sprintf("%03d", k), "_", name, ".png", sep="")
png(filename=fname, width=options$width, height=options$height, res=options$res)
par(mfrow=c(1,2))
# [A] plot with time
plot(time, data[,k], at=sort(as.numeric(levels(as.factor(samples$time)))), col="blue",
xlab="time [h]", ylab=name, main=name,
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1 ))
points(samples$time, data[,k], col="black")
points(samples$time, data[,k], col=rgb(0,0,1,0.6), pch=16)
if (!is.null(info$Protein.name)){
text(x=0, y=max(data[,k], na.rm=TRUE)*1.05,
labels=paste(name, "(", info$Protein.name, ")"), cex=0.4)
}
# [B] plot as factor
plot(time, data[,k], xlab="time", ylab=name, main=name, col=rgb(0.5,0.5,0.5, 0.4),
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1))
points(time, data[,k], col="black")
points(time, data[,k], col=rgb(0,0,1,0.6), pch=16)
par(mfrow=c(1,1))
dev.off()
}
plot_single_factor(1)
get_probe_info <- function(gene_id){
info <- list()
idx <- which(probes$Gene==gene_id)
if (!is.null(idx) & length(idx)>0){
info$Protein.name <- probes$Protein.names[idx[1]]
info$Chip <- probes$Chip[idx[1]]
info$Entry <- probes$Entry[idx[1]]
info$Gene.name <- probes$Gene.names[idx[1]]
} else {
info$Protein.name <- NULL
}
return(info)
}
get_probe_info('Nos2')
get_probe_info('Ppara')
plot_single_factor <- function(k){
name <- factors[k]
info <- get_probe_info(name)
fname <- paste("../results/factors/", sprintf("%03d", k), "_", name, ".png", sep="")
png(filename=fname, width=options$width, height=options$height, res=options$res)
par(mfrow=c(1,2))
# [A] plot with time
plot(time, data[,k], at=sort(as.numeric(levels(as.factor(samples$time)))), col="blue",
xlab="time [h]", ylab=name, main=name,
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1 ))
points(samples$time, data[,k], col="black")
points(samples$time, data[,k], col=rgb(0,0,1,0.6), pch=16)
if (!is.null(info$Protein.name)){
text(x=120, y=max(data[,k], na.rm=TRUE)*1.05,
labels=paste(name, "(", info$Protein.name, ")"), cex=0.4)
}
# [B] plot as factor
plot(time, data[,k], xlab="time", ylab=name, main=name, col=rgb(0.5,0.5,0.5, 0.4),
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1))
points(time, data[,k], col="black")
points(time, data[,k], col=rgb(0,0,1,0.6), pch=16)
par(mfrow=c(1,1))
dev.off()
}
plot_single_factor(1)
plot_single_factor <- function(k){
name <- factors[k]
info <- get_probe_info(name)
fname <- paste("../results/factors/", sprintf("%03d", k), "_", name, ".png", sep="")
png(filename=fname, width=options$width, height=options$height, res=options$res)
par(mfrow=c(1,2))
# [A] plot with time
plot(time, data[,k], at=sort(as.numeric(levels(as.factor(samples$time)))), col="blue",
xlab="time [h]", ylab=name, main=name,
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1 ))
points(samples$time, data[,k], col="black")
points(samples$time, data[,k], col=rgb(0,0,1,0.6), pch=16)
if (!is.null(info$Protein.name)){
text(x=120, y=max(data[,k], na.rm=TRUE)*1.05,
labels=paste(name, "(", info$Protein.name, ")"), cex=0.7)
}
# [B] plot as factor
plot(time, data[,k], xlab="time", ylab=name, main=name, col=rgb(0.5,0.5,0.5, 0.4),
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1))
points(time, data[,k], col="black")
points(time, data[,k], col=rgb(0,0,1,0.6), pch=16)
par(mfrow=c(1,1))
dev.off()
}
plot_single_factor(1)
plot_single_factor <- function(k){
name <- factors[k]
info <- get_probe_info(name)
fname <- paste("../results/factors/", sprintf("%03d", k), "_", name, ".png", sep="")
png(filename=fname, width=options$width, height=options$height, res=options$res)
par(mfrow=c(1,2))
# [A] plot with time
plot(time, data[,k], at=sort(as.numeric(levels(as.factor(samples$time)))), col="blue",
xlab="time [h]", ylab=name, main=name,
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1 ))
points(samples$time, data[,k], col="black")
points(samples$time, data[,k], col=rgb(0,0,1,0.6), pch=16)
if (!is.null(info$Protein.name)){
text(x=140, y=max(data[,k], na.rm=TRUE)*1.08,
labels=paste(name, "(", info$Protein.name, ")"), cex=0.7)
}
# [B] plot as factor
plot(time, data[,k], xlab="time", ylab=name, main=name, col=rgb(0.5,0.5,0.5, 0.4),
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1))
points(time, data[,k], col="black")
points(time, data[,k], col=rgb(0,0,1,0.6), pch=16)
par(mfrow=c(1,1))
dev.off()
}
plot_single_factor(1)
options = list()
options$width=1600
options$height=800
options$res=150
# factor names
factors <- colnames(data)
# Create plot of a single factor
# plot individual data points with number
# TODO: add name, add estimated curves (splines)
plot_single_factor <- function(k){
name <- factors[k]
info <- get_probe_info(name)
fname <- paste("../results/factors/", sprintf("%03d", k), "_", name, ".png", sep="")
png(filename=fname, width=options$width, height=options$height, res=options$res)
par(mfrow=c(1,2))
# [A] plot with time
plot(time, data[,k], at=sort(as.numeric(levels(as.factor(samples$time)))), col="blue",
xlab="time [h]", ylab=name, main=name,
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1 ))
points(samples$time, data[,k], col="black")
points(samples$time, data[,k], col=rgb(0,0,1,0.6), pch=16)
if (!is.null(info$Protein.name)){
text(x=140, y=max(data[,k], na.rm=TRUE)*1.08,
labels=paste(name, "(", info$Protein.name, ")"), cex=0.7)
}
# [B] plot as factor
plot(time, data[,k], xlab="time", ylab=name, main=name, col=rgb(0.5,0.5,0.5, 0.4),
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1))
points(time, data[,k], col="black")
points(time, data[,k], col=rgb(0,0,1,0.6), pch=16)
par(mfrow=c(1,1))
dev.off()
}
plot_single_factor(1)
plot_single_factor <- function(k){
name <- factors[k]
info <- get_probe_info(name)
fname <- paste("../results/factors/", sprintf("%03d", k), "_", name, ".png", sep="")
png(filename=fname, width=options$width, height=options$height, res=options$res)
par(mfrow=c(1,2))
# [A] plot with time
plot(time, data[,k], at=sort(as.numeric(levels(as.factor(samples$time)))), col="blue",
xlab="time [h]", ylab=name, main=name,
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1 ))
points(samples$time, data[,k], col="black")
points(samples$time, data[,k], col=rgb(0,0,1,0.6), pch=16)
if (!is.null(info$Protein.name)){
text(x=140, y=max(data[,k], na.rm=TRUE)*1.08,
labels=info$Protein.name, cex=0.8)
}
# [B] plot as factor
plot(time, data[,k], xlab="time", ylab=name, main=name, col=rgb(0.5,0.5,0.5, 0.4),
ylim=c(0, max(data[,k], na.rm=TRUE)*1.1))
points(time, data[,k], col="black")
points(time, data[,k], col=rgb(0,0,1,0.6), pch=16)
par(mfrow=c(1,1))
dev.off()
}
plot_single_factor(1)
# Create all the plots
for (k in 1:length(factors)){
print(k)
plot_single_factor(k)
}
# install.packages("corrplot")
library(corrplot)
options$width=1600
options$height=1600
options$res=200
# Calculation of correlation scores
cor.pearson <- cor(data, method="pearson", use="pairwise.complete.obs")
cor.spearman <- cor(data, method="spearman", use="pairwise.complete.obs")
# Create the
# Spearman correlation plots
png(filename="../results/cor.spearman_original.png", width=options$width, height=options$height,
res=options$res)
corrplot(cor.spearman, order="original", method="square", type="full",
tl.cex=0.3, tl.col="black", # label settings
)
dev.off()
png(filename="../results/cor.spearman_hclust.png", width=options$width, height=options$height,
res=options$res)
corrplot(cor.spearman, order="hclust", method="square", type="full",
tl.cex=0.3, tl.col="black", # label settings
)
dev.off()
# Pearson
png(filename="../results/cor.pearson_original.png", width=options$width, height=options$height,
res=options$res)
corrplot(cor.pearson, order="original", method="square", type="full",
tl.cex=0.3, tl.col="black", # label settings
)
dev.off()
png(filename="../results/cor.pearson_hclust.png", width=options$width, height=options$height,
res=options$res)
corrplot(cor.pearson, order="hclust", method="square", type="full",
tl.cex=0.3, tl.col="black", # label settings
)
dev.off()
